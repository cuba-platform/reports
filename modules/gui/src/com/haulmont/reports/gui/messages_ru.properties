#
# Copyright (c) 2008-2019 Haulmont.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
menu-config.reports=Отчёты
menu-config.report$Report.browse=Отчёты
menu-config.report$Report.run=Запуск отчётов
menu-config.report$ReportGroup.browse=Группы отчётов
menu-config.report$showChart=Отображение диаграмм
menu-config.report$showReportTable=Показать таблицу
menu-config.report$showPivotTable=Показать cводную таблицу

actions.Report=Отчёт

reportException.failedConnectToOffice=Невозможно подключиться к LibreOffice
reportException.noOpenOfficeFreePorts=Невозможно подключиться к LibreOffice. Отсутствуют свободные порты.
reportException.message=Во время генерации отчёта возникла ошибка
reportException.unableToImportReport=Невозможно импортировать отчёты
reportException.wrongFileType=Некорректный тип файла: %s. Ожидается ZIP.
reportException.noFile=Загрузите файл

inputParameters=Ввод параметров отчёта
reportBrowser=Отчёты
parameterEditor=Редактор параметров
reportEditor=Редактор отчёта
reportEditor.format = Редактор отчёта "%s"
bandDefinitionEditor=Редактор полосы
reportGroupBrowser=Группы отчётов
reportGroupEditor=Группа отчётов
localeCaption=Строки локализации
groupLocaleCaption=Локализация
groupProperties=Группа отчётов

report.new=Новый
report.bands=Полосы отчёта
report.bandDetails=Свойства полосы
report.templateMsg=Основной шаблон не задан
report.restAccess=Доступен для REST API
report.system=Системный

report.reportRunFilterUpdatedDate=Обновлён после
report.reportRunFilterCode=Код
report.reportRunFilterGroup=Группа
report.reportRunFilterName=Имя
report.reportFilterButton=Поиск
report.reportClearButton=Очистить
report.validationScriptOn=Скрипт валидации включен
report.validationScriptOff=Скрипт валидации

definition.name=Имя
definition.orientation=Ориентация
definition.parentBand=Родитель

dataSet.name = Имя набора данных
dataSet.type=Тип набора данных
dataSet.text=Скрипт
dataSet.fullScreen=На весь экран
dataSet.urlJsonSource=URL
dataSet.urlJsonSourceMessage=URL не задан
dataSet.jsonSourceType=Источник JSON
dataSet.jsonParameter=Параметр
dataSet.jsonPathQueryText=JSON path запрос не указан
dataSet.linkParameterName=Связывающее поле
dataSet.jsonPathQuery=JSON path запрос
dataSet.entityParamName=Имя параметра для связанной сущности
dataSet.entitiesParamName=Имя параметра для списка сущностей
dataSet.editView=Выбрать атрибуты сущности
dataSet.dataStore=Хранилище данных
dataSet.useExistingView=Использовать существующее представление (view)
dataSet.viewName=Имя представления (view)
dataSet.entityAliasNull=Значение параметра не указано
dataSet.entityAliasInvalid=Некорректный параметр с именем [%s].
dataSet.cantFindCollectionProperty=Не найдено списочное свойство %s для сущности %s
dataSet.entityWasChanged=Сущность была изменена. Открыт экран редактирования доступных полей для новой сущности %s
dataSet.processTemplate=Предобработать запрос как Groovy шаблон
dataSet.dataStoreMain=Основной
dataSet.textHelp=Здесь можно задать Groovy-скрипт, который формирует набор данных. В скрипт передаются\
  </br>следующие переменные:\
  <ul>\
  <li><code>params</code> - мэп внешних параметров отчета</li>\
  <li><code>parentBand</code> - родительская полоса в виде объекта типа <code>BandData</code></li>\
  <li><code>persistence</code> - объект типа <code>Persistence</code>, позволяющий управлять транзакциями\
  </br>и получать ссылку на <code>EntityManager</code></li>\
  <li><code>dataManager</code> - объект типа <code>DataManager</code>, позволяющий выполнять загрузку и сохранение\
  </br>изменений графов сущностей</li>\
  <li><code>metadata</code> - объект типа <code>Metadata</code>, позволяющий обращаться к метаданным приложения</li>\
  <li><code>security</code> - объект типа <code>Security</code>, выполняющий проверку прав пользователя\
  </br>на различные объекты системы\
  <li><code>userSession</code> - объект типа <code>UserSession</code>, ассоциированный с аутентифицированным\
  </br>в данный момент в системе пользователем\
  <li><code>userSessionSource</code> - объект типа <code>UserSessionSource</code>, обеспечивающий получение объекта\
  <br>сессии текущего пользователя\
  <li><code>timeSource</code> - объект типа <code>TimeSource</code>, обеспечивающий получение текущего времени</li>\
  <li><code>transactional</code> - метод, принимающий на вход замыкание, которое нужно выполнить в \
  <br>новой транзакции. Параметром замыкания становится текущий <code>EntityManager</code></li>\
  <ul>\
  
dataSet.jsonSourceGroovyCodeHelp=Здесь можно задать Groovy-скрипт, который возвращает JSON строку. В скрипт передаются\
  </br>следующие переменные:\
  <ul>\
  <li><code>params</code> - мэп внешних параметров отчета</li>\
  <li><code>parentBand</code> - родительская полоса в виде объекта типа <code>BandData</code></li>\
  <li><code>persistence</code> - объект типа <code>Persistence</code>, позволяющий управлять транзакциями\
  </br>и получать ссылку на <code>EntityManager</code></li>\
  <li><code>dataManager</code> - объект типа <code>DataManager</code>, позволяющий выполнять загрузку и сохранение\
  </br>изменений графов сущностей</li>\
  <li><code>metadata</code> - объект типа <code>Metadata</code>, позволяющий обращаться к метаданным приложения</li>\
  <li><code>security</code> - объект типа <code>Security</code>, выполняющий проверку прав пользователя\
  </br>на различные объекты системы\
  <li><code>userSession</code> - объект типа <code>UserSession</code>, ассоциированный с аутентифицированным\
  </br>в данный момент в системе пользователем\
  <li><code>userSessionSource</code> - объект типа <code>UserSessionSource</code>, обеспечивающий получение объекта\
  <br>сессии текущего пользователя\
  <li><code>timeSource</code> - объект типа <code>TimeSource</code>, обеспечивающий получение текущего времени</li>\
  <li><code>transactional</code> - метод, принимающий на вход замыкание, которое нужно выполнить в \
  <br>новой транзакции. Параметром замыкания становится текущий <code>EntityManager</code></li>\
  <ul>\

dataSet.jsonPathQueryHelp=Здесь можно указать JSON path для обхода JSON дерева.\
  <p>Example:</p>\
  Имея слeдующую JSON структуру, мы можем выбрать все книги используя скрипт <strong>$.store.book[*]</strong>\
  <br>\
  <code>\
            {<br>\
             &nbsp "store": {<br>\
             &nbsp &nbsp "book": [<br>\
             &nbsp &nbsp &nbsp {<br>\
             &nbsp &nbsp &nbsp &nbsp "category": "reference",<br>\
             &nbsp &nbsp &nbsp &nbsp "author": "Nigel Rees",<br>\
             &nbsp &nbsp &nbsp &nbsp "title": "Sayings of the Century",<br>\
             &nbsp &nbsp &nbsp &nbsp "price": 8.95<br>\
             &nbsp &nbsp &nbsp },<br>\
             &nbsp &nbsp &nbsp {<br>\
             &nbsp &nbsp &nbsp &nbsp "category": "fiction",<br>\
             &nbsp &nbsp &nbsp &nbsp "author": "Evelyn Waugh",<br>\
             &nbsp &nbsp &nbsp &nbsp "title": "Sword of Honour",<br>\
             &nbsp &nbsp &nbsp &nbsp "price": 12.99,<br>\
             &nbsp &nbsp &nbsp &nbsp "isbn": "0-553-21311-3"<br>\
             &nbsp &nbsp &nbsp }<br>\
             &nbsp &nbsp ],<br>\
             &nbsp &nbsp "bicycle": {<br>\
             &nbsp &nbsp &nbsp "color": "red",<br>\
             &nbsp &nbsp &nbsp "price": 19.95<br>\
             &nbsp &nbsp }<br>\
             &nbsp }<br>\
            }<br>\
  </code>\
  <br>\
  Для более сложных примеров обратитесь пожалуйста к документации JSON path.

generalFrame.createBandDefinition=Создать
generalFrame.removeBandDefinition=Удалить
generalFrame.up=Вверх
generalFrame.down=Вниз

templateEditor.uploadSuccess=Файл загружен
templateEditor.uploadUnsuccess=Файл не был загружен из-за ошибки
templateEditor.classRequired=Укажите определение
templateEditor.customDefinedBy=Укажите тип определения отчета
templateEditor.warning=Предупреждение
templateEditor.clearTemplateMessage=Текст шаблона будет удален после сохранения

securityFrame.roles=Роли
securityFrame.screens=Экраны

roles.roleName=Роль

screens.createScreen=Добавить экран
screens.removeScreen=Удалить экран
screens.screenId=Идентификатор экрана

parameters.caption=Надпись
parameters.type=Тип параметра
parameters.alias=Алиас параметра
parameters.metaClass=Сущность
parameters.screen=Экран выбора сущности
parameters.defaultValue=Значение по умолчанию
parameters.required=Обязательный параметр?
parameters.hidden=Скрытый
parameters.predefinedTransformation=Существующая трансформация
parameters.validateFields=Валидировать
parameters.crossFieldValidate=Валидировать
parameters.groovyScript=Groovy скрипт
parameters.wildcards=Wildcards
parameters.nameMsg=Заполните поле "Имя параметра"
parameters.typeMsg=Заполните поле "Тип параметра"
parameters.aliasMsg=Заполните поле "Алиас параметра"
parameters.defaultDateIsCurrent=Текущая дата(время)\nпо умолчанию

parametersAndFormatsTab=Параметры и форматы
templatesTab=Шаблоны
generalTab=Структура отчёта
securityTab=Роли и экраны
localesTab=Локализация

button.import=Импортировать
button.run=Выполнить

report.nameMsg=Заполните поле "Имя отчёта"
report.reportTypeMsg=Заполните поле "Тип отчёта"
report.parameters=Параметры
report.crossParametersValidation=Кросс валидация параметров
valuesFormats.name=Имя выходного параметра
valuesFormats.format=Строка форматирования
formatsEdit=Формат для значения
report.valuesFormats=Форматы значений
report.wizard=С помощью конструктора
valueNameMsg=Заполните поле "Имя выходного параметра"
formatStringMsg=Заполните поле "Форматы значений"
roles.addRole=Добавить роль
roles.removeRole=Удалить роль
parameters.enum=Перечисление
parameters.requiredMetaClass=Укажите "Сущность" для параметра
parameters.requiredEnumClass=Укажите "Перечисление" для параметра
report.templates=Шаблоны
templateEditor=Редактор шаблона

fileUploadDialog.caption=Отправка файла

template.code=Код шаблона
template.outputType=Тип вывода
template.file=Файл шаблона
template.outputNamePattern=Имя выходного файла
template.typeForHtml=Тип шаблона
template.groovyType=Шаблон Groovy
template.freemarkerType=Шаблон Freemarker
template.isCustom=Специальный шаблон
template.customDefinedBy=Тип определения
template.customDefinition=Определение
template.isAlterableOutput=Изменяемый тип вывода
template.alterable=Изменяемый
template.namePatternText=Имя выходного файла
template.namePatternTextHelp=Необязательное имя файла, которое будет использоваться для выгрузки готового отчета. \
  Паттерн имени файла может быть как постоянной строкой, так и содержать параметры отчета в качестве переменных, например:\
  <center><br><code>${header.authorName}.xlsx</code></center>\
  <br>Более сложные паттерны с несколькими параметрами и конкатенацией \
  строк можно также создать скриптом в любой полосе в структуре отчета, например:\
  <center><br><code>${Root.title}.xlsx</code></center>\
  <br>где <code>title</code> является результатом следующего скрипта:\
  <center><br><code>[['title' : ('Report for ' + params['author'].firstName\
  <br>+ ' ' + params['author'].lastName)]]</code></center>

report.defaultTemplate=Сделать главным
template.codeMsg=Укажите код шаблона
template.copyNamingPattern=%s копия
template.outputTypeMsg=Укажите тип вывода
template.uploadTemplate=Загрузите файл шаблона
unableToDeleteSystemReportGroup=Невозможно удалить системную группу отчётов
unableToDeleteNotEmptyReportGroup=Невозможно удалить группу, в которой есть отчёты
unableToSaveTemplateWhichDefinedWithClass=Невозможно сохранить шаблон, который определен классом
parameters.localesTab=Локализация
parameters.optionsTab=Свойства
parameters.transformationTab=Трансформация
parameters.validationTab=Валидация

error.rootBandNull=Не установлена корневая полоса
error.bandNameNull=Имя полосы не задано
error.bandOrientationNull=Не задана ориентация полосы [%s]
error.dataSetNameNull=Имя набора данных не задано
error.dataSetTypeNull=Не задан тип набора данных [%s]
error.dataSetScriptNull=Не задан скрипт набора данных [%s]
error.jsonDataSetScriptNull=Не задан groovy скрипт - источник набора данных [%s]
error.bandNamesDuplicated=Нарушена уникальность имени полосы [%s]

actions.printAll=Все
actions.printSelected=Выбранные строки

notification.defaultTemplateIsEmpty=Основной шаблон не задан
notification.fileIsNotAllowedForSpecificTypes=Невозможно сохранить файл шаблона для диаграммы/таблицы/сводной таблицы
notification.selectReport=Пожалуйста, выберите отчёт
notifications.confirmPrintAllheader=Подтверждение
notifications.confirmPrintAll=Вы действительно хотите распечатать отчёт по всем данным?
notifications.confirmPrintSelected=Какие данные использовать для отчёта?
notifications.confirmPrintSelectedheader=Выберите вариант
notifications.noSelectedEntity=Не выбраны данные для отчёта

export=Экспортировать
copy=Копировать
runReport=Выполнить

description.downloadTemplate=Скачать шаблон
description.uploadTemplate=Загрузить шаблон на сервер
description.createTemplate=Создать шаблон
description.editTemplate=Редактировать шаблон

description.createBand=Создать полосу
description.removeBand=Удалить полосу
description.moveUp=Сдвинуть полосу вверх
description.moveDown=Сдвинуть полосу вниз

description.createDataSet=Создать набор данных
description.removeDataSet=Удалить набор данных

runReportBackgroundTitle = Запуск отчёта
runReportBackgroundMessage = Пожалуйста, подождите, идёт генерация отчёта

inputOutputTypesError=Тип файла шаблона и тип вывода отчета не совместимы
caption.preview=Предпросмотр
caption.category=Категория

IDX_REPORT_GROUP_UNIQ_TITLE=Группа отчётов с таким именем уже существует
IDX_REPORT_REPORT_UNIQ_NAME=Отчёт с таким именем уже существует

chartEdit.series=Ряд данных
chartEdit.seriesEmptyMsg=Укажите хотя бы один ряд данных
chartEdit.seriesTypeNullMsg=Укажите тип отображения для ряда данных
chartEdit.seriesValueFieldNullMsg=Укажите поле со значениями для ряда данных
chartEdit.jsonConfig=JSON конфигурация
chartEdit.invalidJson=Неверная JSON конфигурация
chartEdit.serialJsonConfigHelp=Здесь вы можете задать дополнительную JSON конфигурацию для диаграммы с рядами.\
  <br/>Например:\
  </br><code>{\
  <br/>&nbsp &nbsp "theme": "dark",\
  <br/>&nbsp &nbsp "backgroundAlpha": 1,\
  <br/>&nbsp &nbsp "backgroundColor": "black",\
  <br/>&nbsp &nbsp "startDuration": 1,\
  <br/>&nbsp &nbsp "depth3D": 20,\
  <br/>&nbsp &nbsp "angle": 30,\
  <br/>&nbsp &nbsp "graphs": [{\
  <br/>&nbsp &nbsp &nbsp &nbsp "fillAlphas": 1,\
  <br/>&nbsp &nbsp &nbsp &nbsp "lineAlpha": 1,\
  <br/>&nbsp &nbsp &nbsp &nbsp "fillColors": ["#f12711", "#f5af19"],\
  <br/>&nbsp &nbsp &nbsp &nbsp "lineColor": "black",\
  <br/>&nbsp &nbsp &nbsp &nbsp "balloonColor": "#f12711"\
  <br/>&nbsp &nbsp }]\
  <br/>}</code>\
  </br>Обратите внимание, что эта конфигурация может переопределить конфигурацию, автоматически генерируемую в API отчётов.

chartEdit.pieJsonConfigHelp=Здесь вы можете задать дополнительную JSON конфигурацию для круговой диаграммы.\
  <br/>Например:\
  </br><code>{\
  <br/>&nbsp &nbsp "theme": "dark",\
  <br/>&nbsp &nbsp "backgroundAlpha": 1,\
  <br/>&nbsp &nbsp "backgroundColor": "black",\
  <br/>&nbsp &nbsp "depth3D": 20,\
  <br/>&nbsp &nbsp "angle": 40,\
  <br/>&nbsp &nbsp "colors": [\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0dffdc",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#00c6eb",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0091ff",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#0c4ae8",\
  <br/>&nbsp &nbsp &nbsp &nbsp "#1111fa"\
  <br/>&nbsp &nbsp ]\
  <br/>}</code>\
  </br>Обратите внимание, что эта конфигурация может переопределить конфигурацию, автоматически генерируемую в API отчётов.

pivotTableEdit.bandRequired=Заполните имя полосы
pivotTableEdit.rendererRequired=Заполните отрисовку по умолчанию
pivotTableEdit.aggregationsRequired=Заполните агрегацию данных
pivotTableEdit.propertiesRequired=Заполните используемые поля
pivotTableEdit.aggregationPropertiesRequired=Заполните поля агрегации
pivotTableEdit.columnsOrRowsRequired=Заполните поля строки или колонки
pivotTableEdit.propertyIntersection=Поля не должны пересекаться
pivotTableEdit.uniqueAggregationOptionCaption=Наименование агрегации данных должно быть уникально

validationScript=Скрипт валидации
validationScriptHelp=\  Здесь вы можете задать Groovy-script, проверяющий значение параметра отчёта.\
  <br/> Метод <code>invalid(String str)</code> может быть использован для того, чтобы выдать сообщение об ошибке валидации пользователю.\
  <br/> Скрипт должен проверить значение параметра value и вызвать метод invalid(), если значение не валидно.\
  <br/>\
  <br/> Например, <code>invalid('Неверный параметр')</code> выдаст соответствующее сообщение в случае неподходящего параметра для выполнения отчета.\
  <br/>\
   В скрипт передаются следующие переменные:\
  <ul>\
  <li><code>value</code> - значение параметра введенного пользователем</li>\
  <li><code>dataManager</code> - объект типа <code>DataManager</code>, позволяющий выполнять загрузку и сохранение\
  </br>изменений графов сущностей</li>\
  <li><code>metadata</code> - объект типа <code>Metadata</code>, позволяющий обращаться к метаданным приложения</li>\
  <li><code>security</code> - объект типа <code>Security</code>, выполняющий проверку прав пользователя\
  </br>на различные объекты системы\
  <li><code>userSession</code> - объект типа <code>UserSession</code>, ассоциированный с аутентифицированным\
  </br>в данный момент в системе пользователем\
  <li><code>invalid</code> - groovy closure которая если вызвана в скрипте проваливает валидацию\
  <ul>\

crossFieldValidationScriptHelp=\  Здесь вы можете задать Groovy-script, предназначенный для перекрестной проверки значений параметров до запуска отчета.\
  <br/> Метод <code>invalid(String str)</code> может быть использован для того, чтобы выдать сообщение об ошибке валидации пользователю.\
  <br/> Скрипт должен произвести перекрестную проверку параметров и вызвать метод invalid(), если значения параметров не прошли проверку.\
  <br/>\
  <br/> Например, <code>invalid('Дата начала должна быть до даты окончания')</code> выдаст соответствующее сообщение в случае \
  если значение параметра "Дата старта" дальше во времени чем значения параметра "Дата окончания". \
  <br/>\
   В скрипт передаются следующие переменные:\
  <ul>\
  <li><code>params</code> - мэп внешних параметров отчета</li>\
  <li><code>dataManager</code> - объект типа <code>DataManager</code>, позволяющий выполнять загрузку и сохранение\
  </br>изменений графов сущностей</li>\
  <li><code>metadata</code> - объект типа <code>Metadata</code>, позволяющий обращаться к метаданным приложения</li>\
  <li><code>security</code> - объект типа <code>Security</code>, выполняющий проверку прав пользователя\
  </br>на различные объекты системы\
  <li><code>userSession</code> - объект типа <code>UserSession</code>, ассоциированный с аутентифицированным\
  </br>в данный момент в системе пользователем\
  <li><code>invalid</code> - groovy closure которая если вызвана в скрипте проваливает валидацию\
  <ul>\
  
  <br/> Например, <code>invalid('Неверный параметр')</code> выдаст соответствующее сообщение в случае неподходящего параметра для выполнения отчета.

report.localeTextHelp=Здесь вы можете задать название отчета. В списке отчетов для запуска отчет\
  <br/>будет отображаться с названием на языке, с которым пользователь вошел в\
  <br/>систему. Введите в отдельных строках текстового поля пары:</code>\
  <br/><code>имя_локали = название_отчета</code>.\
  <br/>\
  <br/>Например:\
  <br/><code>en = Books by author</code>\
  <br/><code>ru = Книги по автору</code>

parameter.localeTextHelp=Здесь вы можете определить названия параметра для различных локалей.\
  <br/>Для этого в отдельных строках текстового поля следует ввести пары\
  <br/><code>имя_локали = название_отчета</code>.\
  <br/>\
  <br/>Например:\
  <br/><code>en = Book</code>\
  <br/><code>ru = Книга</code>

parameter.transformationScriptHelp=Здесь вы можете определить скрипт Groovy для преобразования параметра\
  <br/>перед использованием его в отчёте. Скрипт Groovy должен возвращать\
  <br/>новое значение параметра. Текущее значение доступно по алиасу\
  <br/><code>paramValue</code>, мэп параметров можно получить с помощью алиаса <code>params</code>.\
  <br/>\
  <br/>Например:\
  <br/><code>return "%" + paramValue + "%"</code>\
  
templateEditor.HighlightActiveLine=Показывать текущую строку
templateEditor.PrintMargin=Граница печати
templateEditor.ShowGutter=Номера строк

scriptEditor = Редактор
localeText = Локализация
transformationScript = Трансформация

pivotTable.rendererOptions=Настройки отрисовки
pivotTable.aggregationOptions=Настройки агрегации данных
pivotTable.defaultAggregation=Агрегация по умолчанию
pivotTable.propertiesOptions=Используемые поля
pivotTable.customOptions=Пользовательские настройки
pivotTable.customFunctions=Переопределяемые функции
pivotTable.customC3properties=Настройки C3 графика
pivotTable.customHeatmapProperties=Настройки тепловой карты

pivotTableAggregationEditor=Редактор агрегации данных
pivotTablePropertyEditor=Редактор поля

pivotTable.functionHelpCaption=Скрипт
pivotTable.propertyFunctionHelp=Функция JavaScript может быть использована для добавления нового поля\
  <br/>в таблицу, вычисленного на основании существующих полей. Аргументом \
  <br/>функции является объект со всеми значениями существующих полей.\
  <br/>Функция возвращает вычисленное значение поля.\
  <br/>\
  <br/>Например:\
  <br/>\
  <br/><code>function(record) {\
  <br/>&nbsp &nbsp return record.Age - record.Age % 10;\
  <br/>}</code>
pivotTable.aggregationFunctionHelp=Функция JavaScript может быть использована для создания собственной\
  <br/>агрегации. Функция вызывается для каждой ячейки таблицы и возвращает \
  <br/>объект со следующими ключами:\
  <ul>\
  <li><code>push</code> - функция, рассчитывающая агрегацию, вызывается для каждой \
  <br/>записи</li>\
  <li><code>value</code> - функция возвращает значение для выбранной ячейки таблицы</li>\
  <li><code>format</code> - функция по значению возвращает форматированное\
  <br/>представление значения в виде строки</li>\
  </ul>\
  Пример агрегатной функции "количество", которая возвращает количество записей для каждой ячейки таблицы:\
  <br/>\
  <br/><code>function(data, rowKey, colKey) {\
  <br/>&nbsp &nbsp return {\
  <br/>&nbsp &nbsp &nbsp &nbsp count: 0,\
  <br/>&nbsp &nbsp &nbsp &nbsp push: function(record) { this.count++; },\
  <br/>&nbsp &nbsp &nbsp &nbsp value: function() { return this.count; },\
  <br/>&nbsp &nbsp &nbsp &nbsp format: function(x) { return x; },\
  <br/>&nbsp &nbsp};\
  <br/>}</code>