/*
 * Copyright (c) 2008-2016 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    ext.cubaVersion = '7.3-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Reports Version ${ext.cubaVersion}")
    println("")

    repositories {
        mavenLocal()

        if (System.getenv('HAULMONT_REPOSITORY_URL')) {
            maven {
                credentials {
                    username System.getenv('HAULMONT_REPOSITORY_USER')
                    password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
                }
                url System.getenv('HAULMONT_REPOSITORY_URL')
            }
        } else {
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://repo.cuba-platform.com/content/groups/work" }
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
        classpath group: 'gradle.plugin.com.github.spotbugs.snom', name: 'spotbugs-gradle-plugin', version: '4.5.1'
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'maven')
apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/reports/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.reports'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
    }
}

def globalModule = project(':reports-global')
def coreModule = project(':reports-core')
def guiModule = project(':reports-gui')
def webModule = project(':reports-web')
def desktopModule = project(':reports-desktop')

def artifactVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')
def baseVersion = rootProject.hasProperty('cuba.version') ? rootProject['cuba.version'] : artifactVersion

configure([globalModule, coreModule, guiModule, webModule, desktopModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'com.github.spotbugs')
    apply(plugin: 'pmd')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile(bom['org.jmockit:jmockit'])
        testCompile(bom['org.junit.jupiter:junit-jupiter-api'])
        testCompile(bom['org.junit.jupiter:junit-jupiter-engine'])
        testCompile(bom['org.junit.vintage:junit-vintage-engine'])
        testCompile(bom['org.hsqldb:hsqldb'])
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": artifactVersion)
        }
    }

    javadoc {
        // move to plugin ?
        options.addStringOption("sourcepath", "")
    }

    spotbugs {
        toolVersion = "4.1.4"
        ignoreFailures = false
        omitVisitors = ['FindDoubleCheck']
        excludeFilter = rootProject.file("codestyle/exclude-filter.xml")
        effort = "max"
        reportLevel = "medium"
    }

    spotbugsMain {
        maxHeapSize = '2048m'

        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("codestyle/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/spotbugs/${project.name}.html")
            }
        }
    }

    spotbugsTest {
        maxHeapSize = '2048m'

        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("codestyle/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/spotbugs/test-${project.name}.html")
            }
        }
    }

    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("${project.buildDir}/reports/pmd")
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-design",
                "java-unusedcode"
        ]
    }

    pmdMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        source project.fileTree("src")
    }

    task pmdReport(dependsOn: pmdMain, group: 'verification', description:
            'Generates a HTML report after executing PMD checks.') {
        doLast {
            ant.xslt(
                    in: "${project.buildDir}/reports/pmd/main.xml",
                    style: "${rootDir}/findbugs/pmd-nicerhtml.xsl",
                    out: "${project.buildDir}/reports/pmd/main.html")
        }
    }

    check {
        dependsOn += ['pmdReport']
    }

    test {
        useJUnitPlatform()
    }
}

configure(globalModule) {

    dependencies {
		compile(bom['com.google.code.gson:gson'])
		compile(bom['com.haulmont.yarg:yarg-api']) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
    }

    entitiesEnhancing {
        main {
            enabled = true
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': artifactVersion)
        }
    }
}

configure(coreModule) {
    apply plugin: 'groovy'

    sourceSets {
        test {
            groovy {
                srcDir 'test'
            }
        }
    }

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
		compile(bom['com.haulmont.yarg:yarg']) {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            exclude group: 'commons-dbcp', module: 'commons-dbcp'
        }
        compile(bom['com.fasterxml.jackson.core:jackson-annotations']) // use the same version as BPM
		
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core-tests', version: baseVersion)
        testCompile(bom['org.apache.commons:commons-dbcp2'])
        compileOnly(bom['javax.servlet:javax.servlet-api'])
        testCompile('javax.xml.bind:jaxb-api:2.3.1')
        testCompile('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        jdbc(bom['org.postgresql:postgresql'])

        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')

        testRuntime(bom['org.postgresql:postgresql'])
        testRuntime(bom['javax.servlet:javax.servlet-api'])

        testCompile(bom['org.springframework:spring-test'])
        testCompile(bom['com.fasterxml.jackson.core:jackson-databind'])
        testCompile(bom['com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'])
        testCompile(bom['org.apache.poi:poi-ooxml']) {
            transitive = false
        }
        testCompile(bom['org.apache.poi:ooxml-schemas']) {
            transitive = false
        }

        testCompile (bom['org.apache.xmlbeans:xmlbeans']) {
            transitive = false
        }

        testCompile(bom['org.codehaus.groovy:groovy-json'])
    }
    
    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
        systemProperty 'dbHost', System.getProperty('dbHost')
        systemProperty 'dbName', System.getProperty('dbName')
        systemProperty 'dbUser', System.getProperty('dbUser')
        systemProperty 'dbPass', System.getProperty('dbPass')
    }

    entitiesEnhancing {
        test {
            enabled = true
        }
    }

    assembleDbScripts {
        moduleAlias = '20-reports'
    }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }
    
    task createTestDb(dependsOn: assemble, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = System.getProperty('dbName') ? System.getProperty('dbName') : 'reports_test'
        dbUser = System.getProperty('dbUser') ? System.getProperty('dbUser') : 'root'
        dbPassword = System.getProperty('dbPass') ? System.getProperty('dbPass') : 'root'
        host = System.getProperty('dbHost') ? System.getProperty('dbHost') : 'localhost'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
        compileOnly(bom['javax.servlet:javax.servlet-api'])
    }

    test {
        jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
    }
}

configure(webModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(bom['com.fasterxml.jackson.core:jackson-databind'])
        compile(bom['com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'])
        compileOnly(bom['javax.servlet:javax.servlet-api'])
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)

        testImplementation(group: 'com.haulmont.cuba', name: 'cuba-web-tests', version: baseVersion)
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web',
                'reports-global', 'reports-gui', 'reports-web')
    }
}

configure(desktopModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-desktop', version: baseVersion)
    }

    compileJava.enabled = false
}

task aggregateJavadoc(type: Javadoc,
        description: 'Generate javadocs from all child projects as if it was a single project',
        group: 'Documentation') {

    destinationDir = file("$buildDir/docs/javadoc")
    title = "${project.name.toUpperCase()} ${cubaVersion.replace('-SNAPSHOT','')} API"

    options.encoding = 'UTF-8'
    options.addStringOption("sourcepath", "")
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC

    subprojects.each { proj ->
        def javadocTask = proj.tasks.getByPath('javadoc')

        source += javadocTask.source
        classpath += javadocTask.classpath
    }
}